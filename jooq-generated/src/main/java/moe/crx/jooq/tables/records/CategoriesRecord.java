/*
 * This file is generated by jOOQ.
 */
package moe.crx.jooq.tables.records;


import moe.crx.jooq.tables.Categories;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoriesRecord extends UpdatableRecordImpl<CategoriesRecord> implements Record4<Long, String, Boolean, Long[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.categories.id</code>.
     */
    public CategoriesRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.categories.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.categories.name</code>.
     */
    public CategoriesRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.categories.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.categories.visible</code>.
     */
    public CategoriesRecord setVisible(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.categories.visible</code>.
     */
    public Boolean getVisible() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>public.categories.boards</code>.
     */
    public CategoriesRecord setBoards(Long[] value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.categories.boards</code>.
     */
    public Long[] getBoards() {
        return (Long[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Boolean, Long[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, Boolean, Long[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Categories.CATEGORIES.ID;
    }

    @Override
    public Field<String> field2() {
        return Categories.CATEGORIES.NAME;
    }

    @Override
    public Field<Boolean> field3() {
        return Categories.CATEGORIES.VISIBLE;
    }

    @Override
    public Field<Long[]> field4() {
        return Categories.CATEGORIES.BOARDS;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Boolean component3() {
        return getVisible();
    }

    @Override
    public Long[] component4() {
        return getBoards();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Boolean value3() {
        return getVisible();
    }

    @Override
    public Long[] value4() {
        return getBoards();
    }

    @Override
    public CategoriesRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CategoriesRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public CategoriesRecord value3(Boolean value) {
        setVisible(value);
        return this;
    }

    @Override
    public CategoriesRecord value4(Long[] value) {
        setBoards(value);
        return this;
    }

    @Override
    public CategoriesRecord values(Long value1, String value2, Boolean value3, Long[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CategoriesRecord
     */
    public CategoriesRecord() {
        super(Categories.CATEGORIES);
    }

    /**
     * Create a detached, initialised CategoriesRecord
     */
    public CategoriesRecord(Long id, String name, Boolean visible, Long[] boards) {
        super(Categories.CATEGORIES);

        setId(id);
        setName(name);
        setVisible(visible);
        setBoards(boards);
    }

    /**
     * Create a detached, initialised CategoriesRecord
     */
    public CategoriesRecord(moe.crx.jooq.tables.pojos.Categories value) {
        super(Categories.CATEGORIES);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setVisible(value.getVisible());
            setBoards(value.getBoards());
        }
    }
}
