/*
 * This file is generated by jOOQ.
 */
package moe.crx.jooq.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Boards implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final String tag;
    private final String name;
    private final String description;
    private final Boolean visible;
    private final Boolean locked;
    private final Boolean nsfw;
    private final Long headerimage;
    private final Long parentcategory;

    public Boards(Boards value) {
        this.id = value.id;
        this.tag = value.tag;
        this.name = value.name;
        this.description = value.description;
        this.visible = value.visible;
        this.locked = value.locked;
        this.nsfw = value.nsfw;
        this.headerimage = value.headerimage;
        this.parentcategory = value.parentcategory;
    }

    public Boards(
        Long id,
        String tag,
        String name,
        String description,
        Boolean visible,
        Boolean locked,
        Boolean nsfw,
        Long headerimage,
        Long parentcategory
    ) {
        this.id = id;
        this.tag = tag;
        this.name = name;
        this.description = description;
        this.visible = visible;
        this.locked = locked;
        this.nsfw = nsfw;
        this.headerimage = headerimage;
        this.parentcategory = parentcategory;
    }

    /**
     * Getter for <code>public.boards.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.boards.tag</code>.
     */
    public String getTag() {
        return this.tag;
    }

    /**
     * Getter for <code>public.boards.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>public.boards.description</code>.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Getter for <code>public.boards.visible</code>.
     */
    public Boolean getVisible() {
        return this.visible;
    }

    /**
     * Getter for <code>public.boards.locked</code>.
     */
    public Boolean getLocked() {
        return this.locked;
    }

    /**
     * Getter for <code>public.boards.nsfw</code>.
     */
    public Boolean getNsfw() {
        return this.nsfw;
    }

    /**
     * Getter for <code>public.boards.headerImage</code>.
     */
    public Long getHeaderimage() {
        return this.headerimage;
    }

    /**
     * Getter for <code>public.boards.parentCategory</code>.
     */
    public Long getParentcategory() {
        return this.parentcategory;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Boards other = (Boards) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.tag == null) {
            if (other.tag != null)
                return false;
        }
        else if (!this.tag.equals(other.tag))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.visible == null) {
            if (other.visible != null)
                return false;
        }
        else if (!this.visible.equals(other.visible))
            return false;
        if (this.locked == null) {
            if (other.locked != null)
                return false;
        }
        else if (!this.locked.equals(other.locked))
            return false;
        if (this.nsfw == null) {
            if (other.nsfw != null)
                return false;
        }
        else if (!this.nsfw.equals(other.nsfw))
            return false;
        if (this.headerimage == null) {
            if (other.headerimage != null)
                return false;
        }
        else if (!this.headerimage.equals(other.headerimage))
            return false;
        if (this.parentcategory == null) {
            if (other.parentcategory != null)
                return false;
        }
        else if (!this.parentcategory.equals(other.parentcategory))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.tag == null) ? 0 : this.tag.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.visible == null) ? 0 : this.visible.hashCode());
        result = prime * result + ((this.locked == null) ? 0 : this.locked.hashCode());
        result = prime * result + ((this.nsfw == null) ? 0 : this.nsfw.hashCode());
        result = prime * result + ((this.headerimage == null) ? 0 : this.headerimage.hashCode());
        result = prime * result + ((this.parentcategory == null) ? 0 : this.parentcategory.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Boards (");

        sb.append(id);
        sb.append(", ").append(tag);
        sb.append(", ").append(name);
        sb.append(", ").append(description);
        sb.append(", ").append(visible);
        sb.append(", ").append(locked);
        sb.append(", ").append(nsfw);
        sb.append(", ").append(headerimage);
        sb.append(", ").append(parentcategory);

        sb.append(")");
        return sb.toString();
    }
}
