/*
 * This file is generated by jOOQ.
 */
package moe.crx.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import moe.crx.jooq.Keys;
import moe.crx.jooq.Public;
import moe.crx.jooq.tables.records.PostsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Posts extends TableImpl<PostsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.posts</code>
     */
    public static final Posts POSTS = new Posts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostsRecord> getRecordType() {
        return PostsRecord.class;
    }

    /**
     * The column <code>public.posts.id</code>.
     */
    public final TableField<PostsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.posts.poster</code>.
     */
    public final TableField<PostsRecord, Long> POSTER = createField(DSL.name("poster"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.posts.parentboard</code>.
     */
    public final TableField<PostsRecord, Long> PARENTBOARD = createField(DSL.name("parentboard"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.posts.parentpost</code>.
     */
    public final TableField<PostsRecord, Long> PARENTPOST = createField(DSL.name("parentpost"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.posts.creationdate</code>.
     */
    public final TableField<PostsRecord, LocalDateTime> CREATIONDATE = createField(DSL.name("creationdate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.posts.title</code>.
     */
    public final TableField<PostsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.posts.message</code>.
     */
    public final TableField<PostsRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.posts.locked</code>.
     */
    public final TableField<PostsRecord, Boolean> LOCKED = createField(DSL.name("locked"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.posts.visible</code>.
     */
    public final TableField<PostsRecord, Boolean> VISIBLE = createField(DSL.name("visible"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.posts.images</code>.
     */
    public final TableField<PostsRecord, Long[]> IMAGES = createField(DSL.name("images"), SQLDataType.BIGINT.getArrayDataType(), this, "");

    private Posts(Name alias, Table<PostsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Posts(Name alias, Table<PostsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.posts</code> table reference
     */
    public Posts(String alias) {
        this(DSL.name(alias), POSTS);
    }

    /**
     * Create an aliased <code>public.posts</code> table reference
     */
    public Posts(Name alias) {
        this(alias, POSTS);
    }

    /**
     * Create a <code>public.posts</code> table reference
     */
    public Posts() {
        this(DSL.name("posts"), null);
    }

    public <O extends Record> Posts(Table<O> child, ForeignKey<O, PostsRecord> key) {
        super(child, key, POSTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PostsRecord, Long> getIdentity() {
        return (Identity<PostsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PostsRecord> getPrimaryKey() {
        return Keys.POSTS_PK;
    }

    @Override
    public Posts as(String alias) {
        return new Posts(DSL.name(alias), this);
    }

    @Override
    public Posts as(Name alias) {
        return new Posts(alias, this);
    }

    @Override
    public Posts as(Table<?> alias) {
        return new Posts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(String name) {
        return new Posts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(Name name) {
        return new Posts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(Table<?> name) {
        return new Posts(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, Long, LocalDateTime, String, String, Boolean, Boolean, Long[]> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Long[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Long[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
